// This generated by evm-cli, edit as necessary
package dto

import (
	"github.com/google/uuid"
	"github.com/guregu/null/v5"

	"time"

	"github.com/IlhamRobyana/user/internal/domain/user/model"
	"github.com/IlhamRobyana/user/shared"
	"github.com/IlhamRobyana/user/shared/crypt"
)

type UserDTOFieldNameType string

type userDTOFieldName struct {
	Id        UserDTOFieldNameType
	Email     UserDTOFieldNameType
	Password  UserDTOFieldNameType
	Fullname  UserDTOFieldNameType
	Status    UserDTOFieldNameType
	CreatedAt UserDTOFieldNameType
	UpdatedAt UserDTOFieldNameType
	DeletedAt UserDTOFieldNameType
	CreatedBy UserDTOFieldNameType
	UpdatedBy UserDTOFieldNameType
	DeletedBy UserDTOFieldNameType
}

var UserDTOFieldName = userDTOFieldName{
	Id:        "id",
	Email:     "email",
	Password:  "password",
	Fullname:  "fullname",
	Status:    "status",
	CreatedAt: "createdAt",
	UpdatedAt: "updatedAt",
	DeletedAt: "deletedAt",
	CreatedBy: "createdBy",
	UpdatedBy: "updatedBy",
	DeletedBy: "deletedBy",
}

type UserCreateRequest struct {
	Email    string `json:"email" validate:"required"`
	Password string `json:"password" validate:"required"`
	Fullname string `json:"fullname" validate:"required"`
}

func (d *UserCreateRequest) Validate() (err error) {
	validator := shared.GetValidator()
	return validator.Struct(d)
}

func (d UserCreateRequest) ToModel() (model.User, error) {
	id := uuid.New()

	// encrypt password using bcrypt
	password, err := crypt.HashByBcrypt(d.Password)
	if err != nil {
		return model.User{}, err
	}
	return model.User{
		Id: id,

		Email:     d.Email,
		Password:  password,
		Fullname:  d.Fullname,
		Status:    model.Active,
		CreatedBy: id.String(),
		UpdatedBy: id.String(),
	}, nil
}

type UserResponse struct {
	Id        uuid.UUID   `json:"id" swaggertype:"string" validate:"required" example:"cb6b3eeb-2fa0-4492-91eb-67a7101a5424"`
	Email     string      `json:"email" validate:"required"`
	Fullname  string      `json:"fullname" validate:"required"`
	Status    string      `json:"status" validate:"required"`
	CreatedAt time.Time   `json:"createdAt" swaggertype:"string" validate:"required" example:"2006-01-02T15:04:05+07:00"`
	UpdatedAt time.Time   `swaggertype:"string" validate:"required" example:"2006-01-02T15:04:05+07:00" json:"updatedAt"`
	DeletedAt null.Time   `swaggertype:"string" example:"2006-01-02T15:04:05+07:00" json:"deletedAt"`
	CreatedBy string      `json:"createdBy" validate:"required"`
	UpdatedBy string      `json:"updatedBy" validate:"required"`
	DeletedBy null.String `example:"string" json:"deletedBy" swaggertype:"string"`
}

func NewUserResponse(user model.User) UserResponse {
	return UserResponse{
		Id:        user.Id,
		Email:     user.Email,
		Fullname:  user.Fullname,
		Status:    user.Status,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		DeletedAt: user.DeletedAt,
		CreatedBy: user.CreatedBy,
		UpdatedBy: user.UpdatedBy,
		DeletedBy: user.DeletedBy,
	}
}

type UserLoginRequest struct {
	Email    string `json:"email" validate:"required"`
	Password string `json:"password" validate:"required"`
}

func (d *UserLoginRequest) Validate() (err error) {
	validator := shared.GetValidator()
	return validator.Struct(d)
}
