// This generated by evm-cli, edit as necessary
package repository

import (
	"github.com/jmoiron/sqlx"
	"github.com/rs/zerolog/log"

	"context"
	"database/sql"

	"github.com/IlhamRobyana/user/infras"
	"github.com/IlhamRobyana/user/shared/failure"
)

type Repository interface {
	UserRepository
}

// UserRepositoryMySQL is the MySQL-backed implementation of UserRepository.
type UserRepositoryMySQL struct {
	DB *infras.MySQLConn
}

// ProvideUserRepositoryMySQL is the provider for this repository.
func ProvideUserRepositoryMySQL(db *infras.MySQLConn) *UserRepositoryMySQL {
	s := new(UserRepositoryMySQL)
	s.DB = db
	return s
}

func (repo *UserRepositoryMySQL) exec(ctx context.Context, command string, args []interface{}) (sql.Result, error) {
	var (
		stmt *sqlx.Stmt
		err  error
	)
	stmt, err = repo.DB.Write.PreparexContext(ctx, command)
	if err != nil {
		log.Error().Err(err).Msg("[exec] failed prepare query")
		return nil, failure.InternalError(err)
	}

	defer stmt.Close()
	result, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		log.Error().Err(err).Msg("[exec] failed exec query")
		return nil, failure.InternalError(err)
	}

	return result, nil
}
