//go:build wireinject
// +build wireinject

// This generated by evm-cli, edit as necessary
package main

import (
	"github.com/google/wire"

	"github.com/IlhamRobyana/user/configs"
	"github.com/IlhamRobyana/user/infras"
	userRepository "github.com/IlhamRobyana/user/internal/domain/user/repository"
	userService "github.com/IlhamRobyana/user/internal/domain/user/service"
	userHandler "github.com/IlhamRobyana/user/internal/handlers/user"
	"github.com/IlhamRobyana/user/transport/http"
	"github.com/IlhamRobyana/user/transport/http/router"
)

// Wiring for configurations.
var configurationsServiceGen = wire.NewSet(
	configs.Get,
)

// Wiring for persistences.
var persistencesServiceGen = wire.NewSet(
	infras.RedisNewClient,
	infras.ProvideMySQLConn,
)

// Wiring for domain user.
var domainUserServiceGen = wire.NewSet(
	// UserService interface and implementation
	userService.ProvideUserService,
	wire.Bind(new(userService.UserService), new(*userService.UserServiceImpl)),
	// UserRepository interface and implementation
	userRepository.ProvideUserRepositoryMySQL,
	wire.Bind(new(userRepository.UserRepository), new(*userRepository.UserRepositoryMySQL)),
)

// Wiring for all domains.
var domainsServiceGen = wire.NewSet(
	domainUserServiceGen,
)

// Wiring for HTTP routing.
var routingServiceGen = wire.NewSet(
	wire.Struct(new(router.DomainHandlers), "*"),

	userHandler.ProvideUserHandler,
	router.ProvideRouter,
)

// Wiring for everything.
func InitializeServiceServiceGen() *http.HTTP {
	wire.Build(
		// configurations
		configurationsServiceGen,
		// persistences
		persistencesServiceGen,

		// domains
		domainsServiceGen,
		// routing
		routingServiceGen,
		// selected transport layer
		http.ProvideHTTP)
	return &http.HTTP{}
}
